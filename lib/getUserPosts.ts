export default async function getUserPosts(id: string) {
  return (
    await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${id}`, {
      next: { revalidate: 60 },
    })
  ).json();
}

/*
1) force-cache (default) - Force-cache використовується незалежно від методу рендерингу (SSR, SSG або ISR) і 
   впливає на кешування вмісту на рівні сервера. Використання force-cache дозволяє серверу кешувати 
   відповідь і надсилати її клієнту безпосередньо з кешу, знижуючи навантаження на сервер і поліпшуючи час відповіді.

2) no-store - Параметр cache зі значенням no-store використовується для зазначення, що запит не 
   повинен бути кешований ні на рівні браузера, ні на проксі-серверах.
   
   Коли ви використовуєте fetch() з параметром cache: 'no-store', браузер виконає запит до сервера
   без використання кешу, і кожен раз буде виконуватись повний запит до сервера.


3) revalidate - Параметр revalidate використовується в Next.js з методом генерації вмісту ISR (Incremental Static Regeneration). 
   Він дозволяє встановити інтервал часу, протягом якого сторінка може використовуватись з кешу перед автоматичним перегенеруванням.
   Коли ви використовуєте revalidate в інкрементальному статичному режимі рендерингу, сторінка генерується під час збірки (build) з 
   попередньо визначеним часом перевалідації (revalidation time). Після цього, якщо клієнт запитує сторінку, вона спочатку повертається 
   з кешу. Однак, якщо пройшов встановлений інтервал часу revalidate, сервер автоматично перегенерує сторінку з новим вмістом і оновлює кеш, 
   щоб наступні запити отримували оновлену версію сторінки.
*/
